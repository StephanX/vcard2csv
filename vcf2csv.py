#!/usr/bin/env python3

import csv
import sys
import logging
import vobject
import re

log = logging.getLogger(__name__)

default_phone_number = '+1 (503) 329-0234'

def sanitize_phone(num):

    orig = num
    # num = num.replace(' ', '').replace('-', '').replace('/', '').replace('(')
    num = re.sub(r'[^0-9]', '', num)
    if len(num) > 11 or len(num) < 10:
        num = default_phone_number
    if num.startswith('1') and len(num) == 11:
        # num = f'+1 ({num[1:4]}) {num[4:7]}-{num[7:11]}'
        num = '+1 (' + num[1:4] + ') ' + num[4:7] + '-' + num[7:11]
    if len(num) == 11 and not num.startswith('1'):
        num = default_phone_number
    if len(num) == 10:
        num = '+1 (' + num[0:3] + ') ' + num[3:6] + '-' + num[6:10]
    return num


def parse(fname):
    """
    Parse vCard file. Returns a generator producing dicts with 'name' (string),
    'emails' (list of strings) and 'phones' (list of strings) fields.
    """

    for vobj in vobject.readComponents(open(fname)):
        if hasattr(vobj, 'fn'):
            entry = {
                'full_name': re.sub(r'[^A-Za-z0-9- ]', '', vobj.fn.value),
                'first_name': re.sub(r'[^A-Za-z0-9- ]', '', vobj.n.value.given),
                'last_name': re.sub(r'[^A-Za-z0-9- ]', '', vobj.n.value.family),
                'email_personal': re.sub(r'[^A-Za-z0-9]', '', vobj.fn.value).lower().strip().replace(' ', '') + "@contoso.com",
                'phone_cell': default_phone_number
            }


        # entry['email_personal'] = vobj.email_list[0].value

        # if hasattr(vobj, 'n'):
        #     entry['name'] = vobj.n.value


        if hasattr(vobj, 'email_list'):
            entry['email_personal'] = vobj.email_list[0].value

        if hasattr(vobj, 'tel_list'):
            for t in vobj.tel_list:
                check_number = sanitize_phone(t.value)
                if check_number != default_phone_number:
                    entry['phone_cell'] = check_number
                    # print(check_number)
                    break

        if entry['last_name'] == '':
            if entry['first_name']:
                entry['last_name'] = entry['first_name']
            elif entry['full_name']:
                entry['last_name'] = entry['full_name']
            elif entry['email_personal']:
                entry['last_name'] = entry['email_personal']
            else:
                entry['last_name'] = entry['phone_cell']

        if entry['first_name'] == '':
            if entry['last_name']:
                entry['first_name'] = entry['last_name']
            elif entry['full_name']:
                entry['first_name'] = entry['full_name']
            else:
                entry['first_name'] = entry['email_personal']

        # log.debug('[parse] got entry for ' + entry['name'])
        print(entry)
        yield entry


def csv_output(fname, entries):
    """
    Write the entries generated by parse() to a UTF-8 encoded CSV file with
    three columns: Name, Phones and Emails.
    """

    with open(fname, 'w', newline='' ) as fd:
        writer = csv.writer(fd)
        writer.writerow(['First Name', 'Last Name', 'Display Name', 'Primary Email', 'SMS number', 'SMS consent date'])
        writer = csv.writer(fd, delimiter=',')

        for e in entries:
            rowdata = [
                e['first_name'],
                e['last_name'],
                e['full_name'],
                e['email_personal'],
                e['phone_cell'],
                "9/16/2023"
            ]

            writer.writerow(
                rowdata
            )


def vcf2csv(infile, outfile):
    """
    Parse entries out of vCard 'infile' and store them to CSV 'outfile'.
    """

    csv_output(outfile, parse(infile))


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: %s <infile.vcf> <outfile.csv>" % sys.argv[0])
        sys.exit(-1)
    logging.basicConfig(level=logging.INFO)
    vcf2csv(sys.argv[1], sys.argv[2])
